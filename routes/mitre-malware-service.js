const { log } = require("console");
const PATH = require("path");
const FS = require("fs");
const SHELL = require("shelljs");
const EXEC = require("child-process-promise").exec;

const TECHNIQUEROW1 =
  '<div class="report-section row"><div class="col s12 m6"><p>${para}</p></div><div class="col s12 m6"><div class="table-wrapper"><table id="details_table" class="striped"><thead><tr style="background-color: #482683;color: #fff;"><th>Detail</th><th>Value</th></tr></thead><tbody><tr><td>ID</td><td>${id}</td></tr><tr><td>Tactic</td><td>${tactic}</td></tr><tr><td>Platforms</td><td>${platforms}</td></tr><tr><td>Contributors</td><td>${contributors}</td></tr><tr><td>Version</td><td>${version}</td></tr><tr><td>Modified At</td><td>${modifiedAt}</td></tr><tr><td>Created At</td><td>${createdAt}</td></tr></tbody></table></div></div> ${subTechniqueDiv} ${detectionDiv} ${mitigationDiv} </div>';
const TECHNIQUEROW2 =
  '<div class="row"><h5>Sub Technique(s)</h5><div class="table-wrapper"><table id="records_table"><thead><tr style="background-color: #482683;color: #fff;"><th>ID</th><th>SubTechnique</th></tr></thead><tbody>${subTechniqueTablebody}</tbody></table></div></div>';
const TECHNIQUEROW3 =
  '<div class="row"><h5>Mitigations(s)</h5><div class="table-wrapper"><table id="records_table"><thead><tr style="background-color: #482683;color: #fff;"><th>ID</th><th>Mitigation</th><th>Description</th></tr></thead><tbody>${mitigationTablebody}</tbody></table></div></div>';
const TECHNIQUEROW4 =
  '<div class="row"><h5>Detection(s)</h5><div class="table-wrapper"><table id="records_table"><thead><tr style="background-color: #482683;color: #fff;"><th>ID</th><th>Detects</th><th>Data Components</th></tr></thead><tbody>${detectionTablebody}</tbody></table></div></div>';

const { printPdf } = require(PATH.join(
  __dirname,
  "..",
  "utils",
  "pdf-generator"
));
const { getMitreMalwareInfo, getTechnicalData } = require(PATH.join(
  __dirname,
  "..",
  "data",
  "mitre-malware-db-service"
));

const { getAttackCoverageMapData } = require(PATH.join(
  __dirname,
  "..",
  "data",
  "attack-coverage-db-service"
));

const {
  getIoCInfo
  } = require(PATH.join(__dirname, "..", "data", "ioc-db-service"));

const TACTICSMAP = require(PATH.join(
  __dirname,
  "..",
  "config",
  "tactics.json"
));

var getAttackCoverageMapForReport = async (techId) => {
  let responseData = TACTICSMAP;
  const coverageData = await getAttackCoverageMapData(techId);
  await Promise.all(
    coverageData.map(async (mapData) => {
      mapData["Tactics"].split("|").map((tactics) => {
        if (
          responseData["tableData"][tactics].indexOf(mapData["TechniqueID"]) ===
          -1
        ) {
          responseData["tableData"][tactics].push(mapData["TechniqueID"]);
          responseData["desc"][mapData["TechniqueID"]] = mapData["Description"];
          responseData["numberofRows"] =
            responseData["numberofRows"] <
            responseData["tableData"][tactics].length
              ? responseData["tableData"][tactics].length
              : responseData["numberofRows"];
        }
      });
    })
  );
  return responseData;
};

var getAttackCoverageMap = async (req, res) => {
  let responseData = TACTICSMAP;
  const coverageData = await getAttackCoverageMapData(req.body.techId);
  await Promise.all(
    coverageData.map(async (mapData) => {
      mapData["Tactics"].split("|").map((tactics) => {
        if (
          responseData["tableData"][tactics].indexOf(mapData["TechniqueID"]) ===
          -1
        ) {
          responseData["tableData"][tactics].push(mapData["TechniqueID"]);
          responseData["desc"][mapData["TechniqueID"]] = mapData["Description"];
          responseData["numberofRows"] =
            responseData["numberofRows"] <
            responseData["tableData"][tactics].length
              ? responseData["tableData"][tactics].length
              : responseData["numberofRows"];
        }
      });
    })
  );
  res.json(responseData);
};

var getMitreMalwarePageInfo = async (req, res) => {
  const response = await getMitreMalwareInfo(
    parseInt(req.body.start),
    parseInt(req.body.limit),
    req.body.malwareQuery,
    req.body.mitreId
  );
  res.json(response);
};

var getTechnicalDataPageInfo = async (req, res) => {
  const response = await getTechnicalData(req.body.techId, true);
  res.json(response);
};

var getReportTechniqueMalwarePageInfo = async (req, res) => {
  const reportData = await getTechnicalData(req.body.techId, true);
  const DIR = __dirname + "/../template/tmp/" + new Date().getTime();
  await EXEC("mkdir " + DIR);
  await EXEC("chmod -R 777 " + DIR);
  var buildPathHtml = DIR + "/techniquedrilldown.html";
  var buildPathCSS = DIR + "/techniquedrilldown.css";
  const buildPathPdf = DIR + "/techniquedrilldown.pdf";
  await SHELL.cp(
    "-R",
    __dirname + "/../template/techniquedrilldown.html",
    buildPathHtml
  );
  await SHELL.cp(
    "-R",
    __dirname + "/../template/techniquedrilldown.css",
    buildPathCSS
  );
  await EXEC("chmod -R 777 " + buildPathHtml);
  SHELL.sed("-i", "dataValue", JSON.stringify(reportData), buildPathHtml);
  SHELL.sed("-i", "DomainValue", "Domain - " + req.body.domain, buildPathHtml);
  const pdf = await printPdf(buildPathHtml);
  FS.writeFileSync(buildPathPdf, pdf);
  FS.readFile(buildPathPdf, (err, data) => {
    res.contentType("application/pdf");
    res.send(data);
  });
};

var getReportMitreMalwarePageInfov2 = async (req, res) => {
  const mitreData = await getMitreMalwareInfo(
    parseInt(req.body.start),
    parseInt(req.body.limit),
    req.body.malwareQuery,
    req.body.mitreId
  );
  let reportData = "";
  await Promise.all(
    mitreData.map(async (mitreInfo) => {
      const tecData = [];
      await Promise.all(
        mitreInfo["techniqueMapping"].map(async (data) => {
          const response = await getTechnicalData(data.split(".")[0], true);
          if (response.length > 0) {
            tecData.push(response[0]);
          }
        })
      );
      reportData += await prepareTechnicalReportData(tecData);
    })
  );
  const DIR = __dirname + "/../template/tmp/" + new Date().getTime();
  await EXEC("mkdir " + DIR);
  await EXEC("chmod -R 777 " + DIR);
  var buildPathHtml = DIR + "/malwaredrilldown.html";
  const buildPathPdf = DIR + "/malwaredrilldown.pdf";
  const buildPathCSS = DIR + "/malwaredrilldown.css";
  await SHELL.cp(
    "-R",
    __dirname + "/../template/malwaredrilldown.html",
    buildPathHtml
  );
  await SHELL.cp(
    "-R",
    __dirname + "/../template/malwaredrilldown.css",
    buildPathCSS
  );
  await EXEC("chmod -R 777 " + buildPathHtml);
  SHELL.sed("-i", "viewpoint", reportData, buildPathHtml);
  SHELL.sed("-i", "malwareTitle", mitreData[0]["name"], buildPathHtml);
  SHELL.sed("-i", "malwareDesc", mitreData[0]["description"], buildPathHtml);
  SHELL.sed("-i", "mitreCreated", mitreData[0]["created"], buildPathHtml);
  SHELL.sed("-i", "mitreModified", mitreData[0]["modified"], buildPathHtml);
  SHELL.sed("-i", "mitreType", mitreData[0]["type"], buildPathHtml);
  SHELL.sed("-i", "mitreLabel", mitreData[0]["labels"], buildPathHtml);
  SHELL.sed(
    "-i",
    "categoryID",
    mitreData[0]["malware_category"],
    buildPathHtml
  );

  const techIds = [];
  mitreData[0]["technicalData"].map((data) => {
    data = data.ID.split(".")[0];
    techIds.push(data);
  });
  if (techIds.length > 0) {
    const attackmap = await getAttackCoverageMapForReport(techIds);
    let table1Data = "";
    for (var idx = 0; idx < attackmap["numberofRows"]; idx++) {
      table1Data +=
        "<tr>" +
        "<td>" +
        (attackmap["tableData"]["reconnaissance"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["reconnaissance"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["resource-development"][idx]
          ? formatTD(
              attackmap["desc"][
                attackmap["tableData"]["resource-development"][idx]
              ]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["initial-access"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["initial-access"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["execution"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["execution"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["persistence"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["persistence"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["privilege-escalation"][idx]
          ? formatTD(
              attackmap["desc"][
                attackmap["tableData"]["privilege-escalation"][idx]
              ]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["defense-evasion"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["defense-evasion"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["credential-access"][idx]
          ? formatTD(
              attackmap["desc"][
                attackmap["tableData"]["credential-access"][idx]
              ]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["discovery"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["discovery"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["lateral-movement"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["lateral-movement"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["collection"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["collection"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["command-and-control"][idx]
          ? formatTD(
              attackmap["desc"][
                attackmap["tableData"]["command-and-control"][idx]
              ]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["exfiltration"][idx]
          ? formatTD(
              attackmap["desc"][attackmap["tableData"]["exfiltration"][idx]]
            )
          : "") +
        "</td>" +
        "<td>" +
        (attackmap["tableData"]["impact"][idx]
          ? formatTD(attackmap["desc"][attackmap["tableData"]["impact"][idx]])
          : "") +
        "</td>" +
        "</tr>";
    }
    SHELL.sed("-i", "table1_attackMap", table1Data, buildPathHtml);
  }
  const ioc_response = await getIoCInfo(0,100, mitreData[0]["name"],false);

  var trHTML = "";
  await Promise.all(
    ioc_response.map(async (item) => {

      trHTML +=
        '<tr class="removeable event-row" event_id =' +
        item.ioc_value +
        "><td>" +
        item.ioc_type +
        "</td><td>" +
        item.threat_type +
        "</td><td>" +
        item.malware +
        "</td><td>" +
        item.malware_alias +
        "</td><td>" +
        item.malware_printable +
        "</td><td>" +
        (item.malware_printable && item.malware_printable !== null
          ? item.malware_printable
          : "-") +
        "</td><td>" +
        item.first_seen_utc +
        "</td><td>" +
        (item.last_seen_utc ? item.last_seen_utc : "-") +
        " </td><td>" +
        item.confidence_level +
        " </td><td>" +
        '<a target="_blank" href="' +
        item.reference +
        '" class="fa-solid fa-file-chart-column event-selector-download">Link</a>' +
        " </td><td>" +
        (item.tags && item.tags !== null ? item.tags : "-") +
        " </td><td>" +
        item.anonymous +
        " </td><td>" +
        item.reporter +
        " </td> " +
        "</tr>";
    })
  );
  SHELL.sed("-i", "records_ioc_table", trHTML, buildPathHtml);
  const pdf = await printPdf(buildPathHtml);
  FS.writeFileSync(buildPathPdf, pdf);
  FS.readFile(buildPathPdf, (err, data) => {
    res.contentType("application/pdf");
    res.send(data);
  });
};

function formatTD(text) {
  text = text.split("(");
  const data = `<center>\
      <span>${text[0]}</span><br>\
      <span>\
          <span style='background-color:#00ffe5';>(${text[1]}</span>\
      </span>\
  </center>`;
  return data;
}

var prepareTechnicalReportData = async (technicalData) => {
  var webpageData = "";
  await Promise.all(
    technicalData.map(async (item) => {
      let data = TECHNIQUEROW1;
      data = data.replace("${id}", item.ID.split(".")[0]);
      data = data.replace(
        "${para}",
        item.Description
          ? item.Description
          : `Technique - ${item.ID.split(".")[0]} - Description`
      );
      data = data.replace("${tactic}", item.Tactic);
      data = data.replace("${platforms}", item.Platforms);
      data = data.replace("${contributors}", item.Contributors);
      data = data.replace("${version}", item.Version);
      data = data.replace("${modifiedAt}", item.LastModified);
      data = data.replace("${createdAt}", item.Created);

      const getTechDetails = await getTechnicalData(item.ID, true);
      // Get Sub Technique
      let dataSubTech = TECHNIQUEROW2;
      if (getTechDetails[0]["subTechniqueData"].length > 0) {
        let tableRow = "";

        await Promise.all(
          getTechDetails[0]["subTechniqueData"].map(async function (item, idx) {
            tableRow += "<tr>";
            tableRow += "<td>" + item.ID + "</td>";
            tableRow += "<td>" + item.Name + "</td>";
            tableRow += "</tr>";
          })
        );

        dataSubTech = dataSubTech.replace("${subTechniqueTablebody}", tableRow);
        data = data.replace("${subTechniqueDiv}", dataSubTech);
      } else {
        dataSubTech = dataSubTech.replace("${subTechniqueTablebody}", "");
        data = data.replace("${subTechniqueDiv}", "");
      }
      // Get Mitigation
      let dataMitigation = TECHNIQUEROW3;
      if (getTechDetails[0]["mitigationData"].length > 0) {
        let tableRow = "";

        await Promise.all(
          getTechDetails[0]["mitigationData"].map(async function (item) {
            tableRow += "<tr>";
            tableRow += "<td>" + item.ID + "</td>";
            tableRow += "<td>" + item.Mitigation + "</td>";
            tableRow += "<td>" + item.Description + "</td>";
            tableRow += "</tr>";
          })
        );

        dataMitigation = dataMitigation.replace(
          "${mitigationTablebody}",
          tableRow
        );
        data = data.replace("${mitigationDiv}", dataMitigation);
      } else {
        dataMitigation = dataMitigation.replace("${mitigationTablebody}", "");
        data = data.replace("${mitigationDiv}", "");
      }
      webpageData += data;
      // Get Detection
      let dataDetection = TECHNIQUEROW4;
      if (getTechDetails[0]["detectionData"].length > 0) {
        let tableRow = "";
        await Promise.all(
          getTechDetails[0]["detectionData"].map(async function (item) {
            tableRow += "<tr>";
            tableRow += "<td>" + item.ID + "</td>";
            tableRow += "<td>" + item.Detects + "</td>";
            tableRow += "<td>" + item["Data Component"] + "</td>";
            tableRow += "</tr>";
          })
        );
        dataDetection = dataDetection.replace(
          "${detectionTablebody}",
          tableRow
        );
        data = data.replace("${detectionDiv}", dataDetection);
      } else {
        dataDetection = dataDetection.replace("${detectionTablebody}", "");
        data = data.replace("${detectionDiv}", "");
      }
      webpageData += data;
    })
  );
  return webpageData;
};

var getReportMitreMalwarePageInfo = async (req, res) => {
  const reportData = await getMitreMalwareInfo(
    parseInt(req.body.start),
    parseInt(req.body.limit),
    req.body.malwareQuery,
    req.body.mitreId
  );
  const DIR = __dirname + "/../template/tmp/" + new Date().getTime();
  await EXEC("mkdir " + DIR);
  await EXEC("chmod -R 777 " + DIR);
  var buildPathHtml = DIR + "/malwaredrilldown.html";
  const buildPathPdf = DIR + "/malwaredrilldown.pdf";

  await SHELL.cp(
    "-R",
    __dirname + "/../template/malwaredrilldown.html",
    buildPathHtml
  );
  await EXEC("chmod -R 777 " + buildPathHtml);

  SHELL.sed("-i", "dataValue", JSON.stringify(reportData), buildPathHtml);
  SHELL.sed("-i", "DomainValue", "Domain - " + req.body.domain, buildPathHtml);
  const pdf = await printPdf(buildPathHtml);
  FS.writeFileSync(buildPathPdf, pdf);
  FS.readFile(buildPathPdf, (err, data) => {
    res.contentType("application/pdf");
    res.send(data);
  });
};

module.exports = {
  getMitreMalwarePageInfo,
  getTechnicalDataPageInfo,
  getReportMitreMalwarePageInfo,
  getReportMitreMalwarePageInfov2,
  getReportTechniqueMalwarePageInfo,
  getAttackCoverageMap,
};
