const { log } = require("console");
const PATH = require("path");
var malwareModelObj = require(PATH.join(
  __dirname,
  "mongo-models",
  "malware-mitre-info-model"
));

var techniqueModelObj = require(PATH.join(
  __dirname,
  "mongo-models",
  "technique-mitre-info-model"
));

var subTechniqueModelObj = require(PATH.join(
  __dirname,
  "mongo-models",
  "subTechnique-mitre-info-model"
));

var mitigationModelObj = require(PATH.join(
  __dirname,
  "mongo-models",
  "mitigation-mitre-info-model"
));

var detectionModelObj = require(PATH.join(
  __dirname,
  "mongo-models",
  "detection-mitre-info-model"
));

var getAttackCoverageMap = require(PATH.join(
  __dirname,
  "mongo-models",
  "attack-coverage-mapping"
));


var getMitreMalwareInfo = async function (start, limit, malwareQuery, mitreId) {
  try {
    var query = {};
    if (mitreId) {
      query = { id: mitreId };
    } else if (malwareQuery) {
      query = {
        $or: [
          { labels: { $regex: malwareQuery } },
          { id: { $regex: malwareQuery } },
          { type: { $regex: malwareQuery } },
          { created: { $regex: malwareQuery } },
          { external_references: { $regex: malwareQuery } },
          { modified: { $regex: malwareQuery } },
          { name: { $regex: malwareQuery } },
          { description: { $regex: malwareQuery } },
          { x_mitre_version: { $regex: malwareQuery } },
          { x_mitre_attack_spec_version: { $regex: malwareQuery } },
          { malware_category: { $regex: malwareQuery } }
        ],
      };
    }
    return await malwareModelObj
      .find(query)
      .sort({ modified: -1 })
      .select(
        "labels id type created malware_category external_references modified name description x_mitre_version x_mitre_attack_spec_version techniqueMapping"
      )
      .skip(start)
      .limit(limit)
      .then(async (data) => {
        if (mitreId) {
          data = JSON.parse(JSON.stringify(data));
          if (data[0]["techniqueMapping"].length > 0) {
            const dataTechMap = [];
            data[0]["techniqueMapping"].map((data)=>{
              dataTechMap.push(data.split('.')[0]);
            })
            data[0]["technicalData"] = await getTechnicalData(
              dataTechMap
            );
          } else {
            data[0]["technicalData"] = [];
          }
        }
        return data;
      })
      .catch((error) => {
        console.log(error);
        return false;
      });
  } catch (error) {
    console.log(error);
  }
};

async function getTechnicalData(techID, isDrillDown) {

  return await techniqueModelObj
    .find({ ID: { $in: techID } })
    .sort({ LastModified: -1 })
    .then(async (data) => {
      data = JSON.parse(JSON.stringify(data))
      if (isDrillDown) {
        data[0]["subTechniqueData"] = await getSubTechnicalData(
          data[0]["mappingData"]?.subTechnique
        );
        data[0]["mitigationData"] = await getMitigationData(
          data[0]["mappingData"]?.mitigation
        );
        data[0]["detectionData"] = await getDetectionData(
          data[0]["mappingData"]?.detection
        );
      }
      return data;
    })
    .catch((error) => {
      console.log(error);
      return [];
    });
}

async function getSubTechnicalData(techID) {
  return await subTechniqueModelObj
    .find({ ID: { $in: techID } })
    .sort({ LastModified: -1 })
    .then(async (data) => {
      return data;
    })
    .catch((error) => {
      return [];
    });
}

async function getMitigationData(techID) {
  return await mitigationModelObj
    .find({ ID: { $in: techID } })
    .sort({ LastModified: -1 })
    .then(async (data) => {
      return data;
    })
    .catch((error) => {
      return [];
    });
}
  
async function getDetectionData(techID) {
  return await detectionModelObj
    .find({})
    .limit(1)
    .then((data) => {
      return data;
    })
    .catch((error) => {
      return [];
    });
}

module.exports = {
  getMitreMalwareInfo,
  getTechnicalData};
